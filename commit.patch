diff --git a/Makefile b/Makefile
index 369a310..0ed7291 100644
--- a/Makefile
+++ b/Makefile
@@ -146,6 +146,8 @@ mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
 .PRECIOUS: %.o
 
 UPROGS=\
+	$U/_sysinfotest\
+	$U/_trace\
 	$U/_cat\
 	$U/_echo\
 	$U/_forktest\
diff --git a/kernel/defs.h b/kernel/defs.h
index ecea5e6..066667d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             gfreemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -114,6 +115,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             gfreeproc(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index dbb0305..c44d1ba 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -8,6 +8,7 @@
 #include "spinlock.h"
 #include "riscv.h"
 #include "defs.h"
+#include "sysinfo.h"
 
 void freerange(void *pa_start, void *pa_end);
 
@@ -68,3 +69,15 @@ void *kalloc(void) {
   if (r) memset((char *)r, 5, PGSIZE);  // fill with junk
   return (void *)r;
 }
+
+// Get free memory from kernel.
+int gfreemem(void) {
+  struct run *r;
+  int freeBytes = 0;
+  acquire(&kmem.lock);
+  for (r = kmem.freelist; r; r = r->next) {
+    freeBytes++;
+  }
+  release(&kmem.lock);
+  return freeBytes * PGSIZE;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..be7828f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -241,6 +241,10 @@ int fork(void) {
     release(&np->lock);
     return -1;
   }
+
+  // trace mask
+  np->mask = p->mask;
+
   np->sz = p->sz;
 
   np->parent = p;
@@ -619,3 +623,16 @@ void procdump(void) {
     printf("\n");
   }
 }
+
+// Get unused number of process.
+int gfreeproc(void) {
+  int nproc = 0;
+  struct proc *p;
+  // Travesal the process list.
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p->state == UNUSED) {
+      nproc++;
+    }
+  }
+  return nproc;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..a0fa97c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -93,6 +93,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int mask;                    // Mask of trace
 
   // these are private to the process, so p->lock need not be held.
   uint64 kstack;               // Virtual address of kernel stack
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4c97875..76c97f2 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -89,6 +89,8 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_rename(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 static uint64 (*syscalls[])(void) = {
     [SYS_fork] sys_fork,   [SYS_exit] sys_exit,     [SYS_wait] sys_wait,     [SYS_pipe] sys_pipe,
@@ -96,16 +98,61 @@ static uint64 (*syscalls[])(void) = {
     [SYS_chdir] sys_chdir, [SYS_dup] sys_dup,       [SYS_getpid] sys_getpid, [SYS_sbrk] sys_sbrk,
     [SYS_sleep] sys_sleep, [SYS_uptime] sys_uptime, [SYS_open] sys_open,     [SYS_write] sys_write,
     [SYS_mknod] sys_mknod, [SYS_unlink] sys_unlink, [SYS_link] sys_link,     [SYS_mkdir] sys_mkdir,
-    [SYS_close] sys_close, [SYS_rename] sys_rename,
+    [SYS_close] sys_close, [SYS_rename] sys_rename, [SYS_trace] sys_trace,   [SYS_sysinfo] sys_sysinfo 
 };
 
+char *syscallName(int num) {
+    static char *names[] = {
+        "",              // 0: ç©º
+        "sys_fork",     // 1
+        "sys_exit",     // 2
+        "sys_wait",     // 3
+        "sys_pipe",     // 4
+        "sys_read",     // 5
+        "sys_kill",     // 6
+        "sys_exec",     // 7
+        "sys_fstat",    // 8
+        "sys_chdir",    // 9
+        "sys_dup",      // 10
+        "sys_getpid",   // 11
+        "sys_sbrk",     // 12
+        "sys_sleep",    // 13
+        "sys_uptime",   // 14
+        "sys_open",     // 15
+        "sys_write",    // 16
+        "sys_mknod",    // 17
+        "sys_unlink",   // 18
+        "sys_link",     // 19
+        "sys_mkdir",    // 20
+        "sys_close",    // 21
+        "sys_rename",   // 22
+        "sys_trace",    // 23
+        "sys_sysinfo"   // 24
+    };
+    if (num > 0 && num < sizeof(names) / sizeof(names[0])) {
+        return names[num];
+    }
+    return "unknown";
+}
+
+// NELEM means numbers of elements in syscalls[].
 void syscall(void) {
   int num;
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
   if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    int arg0;
+    argint(0, &arg0);
+    // p->trapframe->a0 is the syscall return-value.
     p->trapframe->a0 = syscalls[num]();
+    // Get the syscall name.
+    char *name = syscallName(num);
+    if ((p->mask >> num) % 2 == 1)
+    {
+      printf("%d:%s(%d) -> %d\n", p->pid, name, arg0, p->trapframe->a0);
+    }
+    
   } else {
     printf("%d %s: unknown sys call %d\n", p->pid, p->name, num);
     p->trapframe->a0 = -1;
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 6998f87..db6458b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -1,23 +1,25 @@
 // System call numbers
-#define SYS_fork    1
-#define SYS_exit    2
-#define SYS_wait    3
-#define SYS_pipe    4
-#define SYS_read    5
-#define SYS_kill    6
-#define SYS_exec    7
-#define SYS_fstat   8
-#define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
-#define SYS_rename 22
+#define SYS_fork     1
+#define SYS_exit     2
+#define SYS_wait     3
+#define SYS_pipe     4
+#define SYS_read     5
+#define SYS_kill     6
+#define SYS_exec     7
+#define SYS_fstat    8
+#define SYS_chdir    9
+#define SYS_dup     10
+#define SYS_getpid  11
+#define SYS_sbrk    12
+#define SYS_sleep   13
+#define SYS_uptime  14
+#define SYS_open    15
+#define SYS_write   16
+#define SYS_mknod   17
+#define SYS_unlink  18
+#define SYS_link    19
+#define SYS_mkdir   20
+#define SYS_close   21
+#define SYS_rename  22
+#define SYS_trace   23
+#define SYS_sysinfo 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index a69071e..3124e4f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,39 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
+
+uint64 sys_sysinfo(void) {
+  struct proc *p = myproc();
+   
+  // User pointer to struct sysinfo. 
+  uint64 usinfo;
+
+  // Kernel struct sysinfo.
+  struct sysinfo sinfo;
+
+  // Get the address of user pointer.
+  if ((argaddr(0, &usinfo)) < 0) return -1;
+  if(usinfo >= p->sz || usinfo + sizeof(sinfo) > p->sz) return -1;
+
+  // Fill kernel sysinfo with the free memory in bytes.
+  sinfo.freemem = gfreemem();
+
+  // Fill kernel sysinfo with the number of process.
+  sinfo.nproc = gfreeproc();
+
+  // Copy the struct from kernel to user.
+  if(copyout(p->pagetable, usinfo, (char *)&sinfo, sizeof(sinfo)) < 0) return -1;
+  return 0;
+}
+
+uint64 sys_trace(void) {
+  int n;
+  if (argint(0, &n) < 0) return -1;
+  struct proc *p = myproc();
+  p->mask = n;
+  return 0;
+}
 
 uint64 sys_exit(void) {
   int n;
diff --git a/user/user.h b/user/user.h
index ec47d9d..8b2bc3f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,7 +1,10 @@
+struct sysinfo;
 struct stat;
 struct rtcdate;
 
 // system calls
+int sysinfo(struct sysinfo *);
+int trace(int);
 int fork(void);
 int exit(int) __attribute__((noreturn));
 int wait(int*, int);
diff --git a/user/usys.pl b/user/usys.pl
index 3a2f6c4..55c098b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -15,6 +15,8 @@ sub entry {
     print " ret\n";
 }
 	
+entry("sysinfo");
+entry("trace");
 entry("fork");
 entry("exit");
 entry("wait");
