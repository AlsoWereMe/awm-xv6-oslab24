diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..505ca6f
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,8 @@
+{
+    "files.associations": {
+        "param.h": "c",
+        "memlayout.h": "c",
+        "riscv.h": "c",
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 59f7aae..6449841 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -179,6 +179,19 @@ int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 int             test_pagetable();
+void            vmprint(pagetable_t);
+void            vmprint_rec(pagetable_t, int, uint64);
+pagetable_t     pkvminit(void);
+void            pkvminithart(pagetable_t);
+void            pfreewalk(pagetable_t);
+void            pkvmmap(pagetable_t, uint64, uint64, uint64, int);
+void            pfreewalk(pagetable_t);
+uint64          syncpt(pagetable_t, pagetable_t, uint64, uint64);
+uint64          kuvmdealloc(pagetable_t, uint64, uint64);
+
+// vmcopyin.c
+int             copyin_new(pagetable_t, char *, uint64, uint64);
+int             copyinstr_new(pagetable_t, char *, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/entry.S b/kernel/entry.S
index b72ddbc..13f6004 100644
--- a/kernel/entry.S
+++ b/kernel/entry.S
@@ -2,6 +2,7 @@
         # and causes each CPU to jump there.
         # kernel.ld causes the following code to
         # be placed at 0x80000000.
+.global _entry
 .section .text
 _entry:
 	# set up a stack for C.
diff --git a/kernel/exec.c b/kernel/exec.c
index 7b8a524..e918213 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -92,11 +92,20 @@ int exec(char *path, char **argv) {
   // Commit to the user image.
   oldpagetable = p->pagetable;
   p->pagetable = pagetable;
+
+  // Sync.
+  kuvmdealloc(p->k_pagetable, p->sz, 0);
+  syncpt(p->pagetable, p->k_pagetable, 0, sz);
+
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp;          // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  // add print.
+  if(p->pid==1) 
+    vmprint(p->pagetable);
+
   return argc;  // this ends up in a0, the first argument to main(argc, argv)
 
 bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 292ccb8..92d8b19 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -20,6 +20,7 @@ static void wakeup1(struct proc *chan);
 static void freeproc(struct proc *p);
 
 extern char trampoline[];  // trampoline.S
+extern pagetable_t kernel_pagetable; // vm.c
 
 // initialize the proc table at boot time.
 void procinit(void) {
@@ -37,6 +38,9 @@ void procinit(void) {
     uint64 va = KSTACK((int)(p - proc));
     kvmmap(va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
     p->kstack = va;
+    
+    // Copy the physical address to process' member.
+    p->kstack_pa = (uint64)pa;
   }
   kvminithart();
 }
@@ -111,6 +115,17 @@ found:
     return 0;
   }
 
+  // An copy of kernel pagetable.
+  p->k_pagetable = pkvminit();
+  if (p->k_pagetable == 0) {
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  // Map the kernel stack of process to its own kernel pagetable.
+  pkvmmap(p->k_pagetable, p->kstack, p->kstack_pa, PGSIZE, PTE_R | PTE_W);
+
   // Set up new context to start executing at forkret,
   // which returns to user space.
   memset(&p->context, 0, sizeof(p->context));
@@ -127,6 +142,7 @@ static void freeproc(struct proc *p) {
   if (p->trapframe) kfree((void *)p->trapframe);
   p->trapframe = 0;
   if (p->pagetable) proc_freepagetable(p->pagetable, p->sz);
+  if (p->k_pagetable) pfreewalk(p->k_pagetable);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -193,6 +209,8 @@ void userinit(void) {
   uvminit(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
+  syncpt(p->pagetable, p->k_pagetable, 0, p->sz);
+
   // prepare for the very first "return" from kernel to user.
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
@@ -216,8 +234,10 @@ int growproc(int n) {
     if ((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
       return -1;
     }
+    syncpt(p->pagetable, p->k_pagetable, p->sz, p->sz + n);
   } else if (n < 0) {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    kuvmdealloc(p->k_pagetable, p->sz, p->sz + n);
   }
   p->sz = sz;
   return 0;
@@ -262,6 +282,8 @@ int fork(void) {
 
   np->state = RUNNABLE;
 
+  syncpt(np->pagetable, np->k_pagetable, 0, np->sz);
+
   release(&np->lock);
 
   return pid;
@@ -430,12 +452,14 @@ void scheduler(void) {
         // before jumping back to us.
         p->state = RUNNING;
         c->proc = p;
+
+        pkvminithart(p->k_pagetable);
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
-
+        kvminithart();
         found = 1;
       }
       release(&p->lock);
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..52d8a0d 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -103,4 +103,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // New member
+  pagetable_t k_pagetable;    // Process physical pagetable.
+  uint64 kstack_pa;           // Process physical stack.
 };
diff --git a/kernel/vm.c b/kernel/vm.c
index b794885..5a09f7c 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -250,6 +250,14 @@ void uvmfree(pagetable_t pagetable, uint64 sz) {
   freewalk(pagetable);
 }
 
+// Free user memory pages,
+// then free page-table pages withou free physical.
+void puvmfree(pagetable_t pagetable, uint64 sz) {
+  if (sz > 0) uvmunmap(pagetable, 0, PGROUNDUP(sz) / PGSIZE, 0);
+  pfreewalk(pagetable);
+}
+
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -316,21 +324,7 @@ int copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len) {
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
 int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
-  uint64 n, va0, pa0;
-
-  while (len > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > len) n = len;
-    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
-
-    len -= n;
-    dst += n;
-    srcva = va0 + PGSIZE;
-  }
-  return 0;
+  return copyin_new(pagetable, dst, srcva, len);
 }
 
 // Copy a null-terminated string from user to kernel.
@@ -338,44 +332,145 @@ int copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len) {
 // until a '\0', or max.
 // Return 0 on success, -1 on error.
 int copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max) {
-  uint64 n, va0, pa0;
-  int got_null = 0;
+  return copyinstr_new(pagetable, dst, srcva, max);
+}
 
-  while (got_null == 0 && max > 0) {
-    va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
-    if (pa0 == 0) return -1;
-    n = PGSIZE - (srcva - va0);
-    if (n > max) n = max;
-
-    char *p = (char *)(pa0 + (srcva - va0));
-    while (n > 0) {
-      if (*p == '\0') {
-        *dst = '\0';
-        got_null = 1;
-        break;
+// check if use global kpgtbl or not
+int test_pagetable() {
+  uint64 satp = r_satp();
+  uint64 gsatp = MAKE_SATP(kernel_pagetable);
+  printf("test_pagetable: %d\n", satp != gsatp);
+  return satp != gsatp;
+}
+
+void vmprint(pagetable_t pagetable) {
+  printf("page table %p\n", pagetable);
+  vmprint_rec(pagetable, 0, 0);
+}
+
+void vmprint_rec(pagetable_t pagetable, int level, uint64 va) {
+  if (level > 2)
+    panic("vmprint_rec: invalid level");
+
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pagetable[i];
+
+    // Just print valid pte.
+    if (pte & PTE_V) {
+      uint64 child = PTE2PA(pte);
+
+      // Print prefix vertical bar and indent.
+      for (int l = 0; l < level; l++)
+        printf("||\t");
+      printf("||idx: %d: ", i);
+
+      // Constructing flag.
+      char flags[5];
+      flags[0] = (pte & PTE_R) ? 'r' : '-';
+      flags[1] = (pte & PTE_W) ? 'w' : '-';
+      flags[2] = (pte & PTE_X) ? 'x' : '-';
+      flags[3] = (pte & PTE_U) ? 'u' : '-';
+      flags[4] = '\0';
+
+      // Permission bits can exist only on leaf nodes.
+      if (strncmp(flags, "---", 3) != 0) {
+        // That's leaf.
+        // Caculating va and print it.
+        uint64 va_start = va | ((uint64)i << 12);
+        uint64 pa = PTE2PA(pte);
+        printf("va: %p -> pa: %p, flags: %s\n", (void *)va_start, (void *)pa, flags);
       } else {
-        *dst = *p;
+        // Not a leaf.
+        // Just need print pa.
+        printf("pa: %p, flags: %s\n", (void *)child, flags);
+
+        // Recursive traversal.
+        uint64 va_next = va | ((uint64)i << (12 + 9 * (2 - level)));
+        vmprint_rec((pagetable_t)child, level + 1,va_next);
       }
-      --n;
-      --max;
-      p++;
-      dst++;
     }
+  }
+}
+
+pagetable_t pkvminit() {
+  pagetable_t k_pagetable = (pagetable_t)kalloc();
+  memset(k_pagetable, 0, PGSIZE);
+
+  if (mappages(k_pagetable, UART0, PGSIZE, UART0, PTE_R | PTE_W) != 0) goto bad;
+
+  if (mappages(k_pagetable, VIRTIO0, PGSIZE, VIRTIO0, PTE_R | PTE_W) != 0) goto bad;
+
+  if (mappages(k_pagetable, PLIC, 0x400000, PLIC, PTE_R | PTE_W) != 0) goto bad;
+
+  if (mappages(k_pagetable, KERNBASE, (uint64)etext - KERNBASE, KERNBASE, PTE_R | PTE_X) != 0) goto bad;
+
+  if (mappages(k_pagetable, (uint64)etext, PHYSTOP - (uint64)etext, (uint64)etext, PTE_R | PTE_W) != 0) goto bad;
 
-    srcva = va0 + PGSIZE;
+  if (mappages(k_pagetable, TRAMPOLINE, PGSIZE, (uint64)trampoline, PTE_R | PTE_X) != 0) goto bad;
+
+  return k_pagetable;
+  
+bad:
+  pfreewalk(k_pagetable);
+  return 0;
+}
+
+void pkvminithart(pagetable_t k_pagetable) {
+  w_satp(MAKE_SATP(k_pagetable));
+  sfence_vma();
+}
+
+void pkvmmap(pagetable_t k_pagetable, uint64 va, uint64 pa, uint64 sz, int perm) {
+  if (mappages(k_pagetable, va, sz, pa, perm) != 0) {
+    panic("kvmmap");
   }
-  if (got_null) {
-    return 0;
-  } else {
-    return -1;
+}
+
+void pfreewalk(pagetable_t pagetable) {
+  // there are 2^9 = 512 PTEs in a page table.
+  for (int i = 0; i < 512; i++) {
+    pte_t pte = pagetable[i];
+    if ((pte & PTE_V) && (pte & (PTE_R | PTE_W | PTE_X)) == 0) {
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+      pfreewalk((pagetable_t)child);
+      pagetable[i] = 0;
+    } 
+    pagetable[i] = 0;
   }
+  kfree((void *)pagetable);
 }
 
-// check if use global kpgtbl or not
-int test_pagetable() {
-  uint64 satp = r_satp();
-  uint64 gsatp = MAKE_SATP(kernel_pagetable);
-  printf("test_pagetable: %d\n", satp != gsatp);
-  return satp != gsatp;
+uint64 syncpt(pagetable_t old, pagetable_t new, uint64 sz, uint64 sz_n) {
+  pte_t* pte;
+  uint64 pa, i;
+  uint flags;
+  sz = PGROUNDUP(sz);
+  for (i = sz; i < sz_n; i += PGSIZE) {
+    if ((pte = walk(old, i, 0)) == 0) {
+      panic("sync_pagetable:pte should exist");
+    }
+    if ((*pte & PTE_V) == 0) {
+        panic("sync_pagetable:page not present");
+    }
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte) & (~PTE_U);
+    if (mappages(new, i, PGSIZE, (uint64)pa, flags) != 0) {
+      goto err;
+    }
+  }
+  return 0;
+
+err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
+uint64 kuvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz) {
+  if (newsz >= oldsz) return oldsz;
+  if (PGROUNDUP(newsz) < PGROUNDUP(oldsz)) {
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+  return newsz;
 }
\ No newline at end of file
diff --git a/user/sh.c b/user/sh.c
index 13c7d7c..6f1b5a8 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -54,6 +54,7 @@ void panic(char *);
 struct cmd *parsecmd(char *);
 
 // Execute cmd.  Never returns.
+__attribute__((noreturn))
 void runcmd(struct cmd *cmd) {
   int p[2];
   struct backcmd *bcmd;
